library(readr)
library(stringr)
library(knitr)
library(resample)
#' function should return a sample x gene tibble, with an extra column named
#' "subject_id" that contains the geo accession ids for each subject.
#'
#' @param filename (str): the file to read.
#'
#' @return dataframe
#' @export
#'
#' @examples expr_mat <- read_expression_table('example_intensity_data.csv')
#'
read_expression_table <- function(filename) {
expr_mat <- tibble::as_tibble(t(read.table(
filename,
header = TRUE,
sep = ' '
),
rownames = "probeids"))
return(temp_table)
}
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::kable(head(expr_mat[c(1:5)]))
View(expr_mat)
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(knitr)
library(resample)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::kable(head(expr_mat[c(1:5)]))
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filter_1[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filter_1[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filter_1[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filter_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::kable(head(expr_mat[c(1:5)]))
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
View(filtered_data)
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::kable(head(expr_mat[c(1:5)]))
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
library(cluster)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
distance <- dist(data, method = euclidian)
clusters <- hclust(distance, method = 'complete')
plot(clusters, cex = 0.6, hang = -1)
}
clustering(filtered_data)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
distance <- dist(data, method = 'euclidian')
clusters <- hclust(distance, method = 'complete')
plot(clusters, cex = 0.6, hang = -1)
}
clustering(filtered_data)
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(df, method = x)$ac
}
map_dbl(m, ac)
}
best_method(filtered_data)
lapply(m, ac(m))
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
print(x)
print(agnes(data, method = x)$ac)
}
lapply(m, ac(m))
}
best_method(filtered_data)
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
print(x)
print(agnes(data, method = x)$ac)
}
lapply(m, function(x){ac(x)})
}
best_method(filtered_data)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
distance <- dist(data, method = 'euclidian')
clusters <- agnes(distance, method = 'ward')
plot(clusters, cex = 0.6, hang = -1)
}
clustering(filtered_data)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
clusters <- agnes(data, method = 'ward')
plot(clusters, cex = 0.6, hang = -1)
}
clustering(filtered_data)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
clusters <- agnes(data, method = 'ward')
}
clustering(filtered_data)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
clusters <- agnes(data, method = 'ward')
pltree(hc3, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
}
clustering(filtered_data)
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
clusters <- agnes(data, method = 'ward')
pltree(clusters, cex = 0.6, hang = -1, main = "Dendrogram of agnes")
}
clustering(filtered_data)
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
print(x)
agnes(data, method = x)$ac
}
lapply(m, function(x){ac(x)})
}
best_method(filtered_data)
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(data, method = x)$ac
}
lapply(m, function(x){ac(x)})
}
best_method(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
best_method(filtered_data)
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
library(ggdendro)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
clustering(filtered_data)
knitr::opts_chunk$set(echo = TRUE)
source("main.R")
expr_mat <- read_expression_table('/usr4/bf527/dlenci/data/bf528_data/example_intensity_data.csv')
knitr::kable(head(expr_mat[c(1:5)]))
filtered_data <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
knitr::kable(head(filtered_data[c(1:5)]))
best_method(filtered_data)
clustering(filtered_data)
heat_map <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
heatmap(data)
}
heat_map(data)
heat_map <- function(data){
rownames(data) <- data[,1]
data <- as.matrix(data[,-1])
heatmap(data)
}
heat_map(data)
heat_map <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
heatmap(data)
}
heat_map(filtered_data)
heat_map <- function(data){
rownames(data) <- data[,1]
data <- as.matrix(data[,-1])
heatmap(data)
}
heat_map(filtered_data)
