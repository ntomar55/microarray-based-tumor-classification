if(test > lower || test < upper){
return_val = FALSE
} else {
return_val = TRUE
}
return(return_val)
}
sec_filter <- function(data, alpha = 0.01){
df = 134 - 1
sample_ids <- data[,1]
data <- data[,-1]
up <- qchisq(alpha/2,df)
low <- qchisq(1-alpha/2,df)
sds <- data %>%
lapply(sd)
sds <- unname(unlist(sds))
sigma <- median(sds, na.rm = T)
drop <- which(sapply(data[,-1], function(x)all({chi_square(x, up, low, sigma) == TRUE})))
data <- data[,-drop]
data <- cbind(sample_ids, data)
return(data)
}
#'
#'third filter calculates coefficient of variation for each column in
#'a datafrmae and checks to see if the coefficient reaches a predetermined
#'threshold.
#'
#'@param dataframe
#'
#'@return filtered dataframe
#'
third_filter <- function(data, thresh = 0.186){
sample_ids <- data[,1]
data <- data[,-1]
keep <- apply(data, 2, function(x) any((sd(x)/abs(mean(x))) > 0.186))
data <- data[,keep]
data <- cbind(sample_ids, data)
return(data)
}
#' clustering
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(data, method = x)$ac
}
lapply(m, function(x){ac(x)})
}
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
dist_mat <- dist(data, method = 'euclidean')
model <- hclust(dist_mat, method = 'ward.D')
dhc <- as.dendrogram(model)
# Rectangular lines
ddata <- dendro_data(dhc, type = "rectangle")
plot <- ggplot(segment(ddata)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(ddata),
aes(x = x, y = y, label = label), size = 3, angle = 45) +
theme_dendro()
show(plot)
return(model)
}
#'
#' Generate heatmap for filtered data. Use the metadata table to add color
#' bar visualizing the clusters based on cancer subtype.
#'
#' @param filtered_data
#' @return heatmap plot
#'
mapSampleToColor <- function(meta){
colorsVector = ifelse(meta["cit.coloncancermolecularsubtype"]=="C3",
"red", ifelse(meta["cit.coloncancermolecularsubtype"]=="C4",
"blue", "green"))
return(colorsVector)
}
heat_map <- function(data){
rownames(data) <- data[,1]
data <- as.matrix(data[,-1])
sampleColors = mapSampleToColor(meta_data)
png(file="/projectnb/bf528/users/saxophone/data_p1/data_analysis_out/heatmap_5_3.png")
heatmap.2(data, RowSideColors=sampleColors,
trace = "none",
density.info="none",
distfun = function(x) dist(x, method="euclidean"),
hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()
}
#'
#' Perform welch t-test on filtered data comparing gene expression for all
#' genes between clusters 1 and 2 generated in the clustering function.
#'
#' @param filtered_data/clusters
#'
#' @return dataframe containing genes differentially expressed with p < 0.05.
welch_t <- function(data, clust){
cut_avg <- cutree(clust, k = 2)
data_c <- mutate(data, cluster = cut_avg)
count(data_c, cluster)
data_c_long <- data_c[-c(1)] %>%
pivot_longer(-cluster, names_to = "genes", values_to = "expression")
stat.test <- data_c_long %>%
group_by(genes) %>%
t_test(expression ~ cluster) %>%
adjust_pvalue(method = "fdr") %>%
filter(p.adj < 0.05) %>%
arrange(desc(statistic))
print(head(stat.test))
stat.test <- stat.test[c("genes", "statistic", "p", "p.adj")] %>%
rename(t = statistic) %>%
rename(padj = p.adj)
return(as_tibble(stat.test))
}
#'
#' Generate csv files and plots needed for report.
#' May need to change location of files being read in.
#'
#read in data
expr_mat <- read_expression_table('/projectnb/bf528/users/saxophone/data_p1/samples/combat_exprs_data.csv')
meta_data <- read_meta_table('/usr4/bf527/dlenci/data/bf528_data/proj_metadata.csv')
#perform necessary filtering to generate required csv data
filtered_data_4_4 <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
filtered_data_4_2 <- first_filter(expr_mat) %>%
sec_filter()
#main.R
library(tibble)
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(knitr)
library(resample)
library(cluster)
library(ggdendro)
library(ggplot2)
library(rstatix)
library(hablar)
library(gplots)
library(biomaRt)
#' Read the expression data "csv" file.
#'
#' Function to read microarray expression data stored in a csv file. The
#' function should return a sample x gene tibble, with an extra column named
#' "subject_id" that contains the geo accession ids for each subject.
#'
#' @param filename (str): the file to read.
#'
#' @return dataframe
#' @export
#'
#' @examples expr_mat <- read_expression_table('example_intensity_data.csv')
#'
read_expression_table <- function(filename) {
expr_mat <- tibble::as_tibble(t(read.table(
filename,
header = TRUE,
sep = ','
)),
rownames = "sample_ids")
colnames(expr_mat) <- expr_mat[1,]
expr_mat <- expr_mat[-1,]
expr_mat <- expr_mat %>%
rename(sample_ids = X) %>%
separate(sample_ids, sep = '_', c("sample_ids", NA, NA, NA, NA)) %>%
retype()
sample_ids <- expr_mat[,1]
as_numeric_mat <- as.data.frame(mutate_all(expr_mat[,-1],function(x) as.numeric(as.character(x))))
expr_mat <- cbind(sample_ids, as_numeric_mat)
return(expr_mat)
}
read_meta_table <- function(filename) {
meta_data<- tibble::as_tibble(read.csv(
filename,
header = TRUE
))
meta_data <- meta_data[meta_data$geo_accession %in% expr_mat$sample_ids,]
return(meta_data)
}
#' First step of filtering noise.
#' Keep only genes expressed in 20% of samples, by saving only genes that have
#' greater than log2(15) gene expression in at least 20% of samples.
#'
#' @param dataframe unfiltered for noise
#'
#' @return dataframe filtered for noise
#'
first_filter <- function(data) {
#drop all cols that dont meet criteria
sample_ids <- data[,1]
data <- data[,-1]
drop <- which(sapply(data, function(x)all(sum(x > log2(15))/length(x) < 0.2)))
#combine sample_ids with filtered data
filtered <- data[,-drop]
filtered <- cbind(sample_ids, filtered)
return(filtered)
}
#' Second step of filtering.
#' Have a variance significantly different from the median variance of all
#' probe sets with p<0.01.
#'
#' chi_square function calculates t-stat for a vecotr of data then checks if
#' t-stat falls in the upper and lower range.
#'
#' sec_filter calculates upper and lower range given degrees of freedom
#' and significance value
#'
#' Test statistic = (N-1)(s/sigma)^2
#'
#' @param dataframe
#'
#' @return dataframe filtered for noise
#'
chi_square <- function(data, upper, lower, sig){
df = 134 - 1
v = var(data)
test = df*v/(sig^2)
if(test > lower || test < upper){
return_val = FALSE
} else {
return_val = TRUE
}
return(return_val)
}
sec_filter <- function(data, alpha = 0.01){
df = 134 - 1
sample_ids <- data[,1]
data <- data[,-1]
up <- qchisq(alpha/2,df)
low <- qchisq(1-alpha/2,df)
sds <- data %>%
lapply(sd)
sds <- unname(unlist(sds))
sigma <- median(sds, na.rm = T)
drop <- which(sapply(data[,-1], function(x)all({chi_square(x, up, low, sigma) == TRUE})))
data <- data[,-drop]
data <- cbind(sample_ids, data)
return(data)
}
#'
#'third filter calculates coefficient of variation for each column in
#'a datafrmae and checks to see if the coefficient reaches a predetermined
#'threshold.
#'
#'@param dataframe
#'
#'@return filtered dataframe
#'
third_filter <- function(data, thresh = 0.186){
sample_ids <- data[,1]
data <- data[,-1]
keep <- apply(data, 2, function(x) any((sd(x)/abs(mean(x))) > 0.186))
data <- data[,keep]
data <- cbind(sample_ids, data)
return(data)
}
#' clustering
#'
#' use the cluster package and the associated distance and hclust functions
#' to perform clustering
#'
#' then generate plot using ggplot2
#'
#' @param df
#'
#' @return ggplot object
#'
best_method <- function(data){
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(data, method = x)$ac
}
lapply(m, function(x){ac(x)})
}
clustering <- function(data){
rownames(data) <- data[,1]
data <- data[,-1]
dist_mat <- dist(data, method = 'euclidean')
model <- hclust(dist_mat, method = 'ward.D')
dhc <- as.dendrogram(model)
# Rectangular lines
ddata <- dendro_data(dhc, type = "rectangle")
plot <- ggplot(segment(ddata)) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(ddata),
aes(x = x, y = y, label = label), size = 3, angle = 45) +
theme_dendro()
show(plot)
return(model)
}
#'
#' Generate heatmap for filtered data. Use the metadata table to add color
#' bar visualizing the clusters based on cancer subtype.
#'
#' @param filtered_data
#' @return heatmap plot
#'
mapSampleToColor <- function(meta){
colorsVector = ifelse(meta["cit.coloncancermolecularsubtype"]=="C3",
"red", ifelse(meta["cit.coloncancermolecularsubtype"]=="C4",
"blue", "green"))
return(colorsVector)
}
heat_map <- function(data){
rownames(data) <- data[,1]
data <- as.matrix(data[,-1])
sampleColors = mapSampleToColor(meta_data)
png(file="/projectnb/bf528/users/saxophone/data_p1/data_analysis_out/heatmap_5_3.png")
heatmap.2(data, RowSideColors=sampleColors,
trace = "none",
density.info="none",
distfun = function(x) dist(x, method="euclidean"),
hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()
}
#'
#' Perform welch t-test on filtered data comparing gene expression for all
#' genes between clusters 1 and 2 generated in the clustering function.
#'
#' @param filtered_data/clusters
#'
#' @return dataframe containing genes differentially expressed with p < 0.05.
welch_t <- function(data, clust){
cut_avg <- cutree(clust, k = 2)
data_c <- mutate(data, cluster = cut_avg)
count(data_c, cluster)
data_c_long <- data_c[-c(1)] %>%
pivot_longer(-cluster, names_to = "genes", values_to = "expression")
stat.test <- data_c_long %>%
group_by(genes) %>%
t_test(expression ~ cluster) %>%
adjust_pvalue(method = "fdr") %>%
filter(p.adj < 0.05) %>%
arrange(desc(statistic))
print(head(stat.test))
stat.test <- stat.test[c("genes", "statistic", "p", "p.adj")] %>%
rename(t = statistic) %>%
rename(padj = p.adj)
return(as_tibble(stat.test))
}
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(affy_vector[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
new_data <- cbind(new_names, data)
return(new_names)
}
expr_mat <- read_expression_table('/projectnb/bf528/users/saxophone/data_p1/samples/combat_exprs_data.csv')
meta_data <- read_meta_table('/usr4/bf527/dlenci/data/bf528_data/proj_metadata.csv')
#perform necessary filtering to generate required csv data
filtered_data_4_4 <- first_filter(expr_mat) %>%
sec_filter() %>%
third_filter()
filtered_data_4_2 <- first_filter(expr_mat) %>%
sec_filter()
clusters_4_4 <- clustering(filtered_data_4_4)
clusters_4_2 <- clustering(filtered_data_4_2)
#generate heatmaps
heat_map(filtered_data_4_4)
#perform welch t test on filtered data and output to csv.
diff_exp_tab_5_4 <- welch_t(filtered_data_4_4, clusters_4_4)
test <- affy_to_hgnc(diff_exp_tab_5_4)
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(data[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
new_data <- cbind(new_names, data)
return(new_names)
}
test <- affy_to_hgnc(diff_exp_tab_5_4)
View(diff_exp_tab_5_4)
test <- affy_to_hgnc(diff_exp_tab_5_4)
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(data[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
#new_data <- cbind(new_names, data)
return(new_names)
}
test <- affy_to_hgnc(diff_exp_tab_5_4)
View(test)
View(test)
View(test)
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(data[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
new_data <- merge(data, new_names, by.x = "genes", by.y = "affy_hg_u133_plus_2")
return(new_names)
}
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(data[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
new_data <- merge(data, new_names, by.x = "genes", by.y = "affy_hg_u133_plus_2")
return(new_data)
}
test <- affy_to_hgnc(diff_exp_tab_5_4)
View(test)
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(data[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
new_data <- merge(data, new_names, by.x = "genes", by.y = "affy_hg_u133_plus_2") %>%
arrange(desc(t))
return(new_data)
}
test <- affy_to_hgnc(diff_exp_tab_5_4)
affy_to_hgnc <- function(data) {
data <- as_tibble(data)
#set filtered data as vector
affy_vector <- pull(data[,1])
#generate ensembl call
ensembl <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
mirror = "useast",
host = "http://www.ensembl.org")
#get hgnc names
new_names <- getBM(attributes = c("affy_hg_u133_plus_2", "hgnc_symbol"),
filters = 'affy_hg_u133_plus_2',
values = affy_vector,
mart = ensembl)
new_data <- merge(data, new_names, by.x = "genes", by.y = "affy_hg_u133_plus_2") %>%
arrange(desc(t))
new_data <- new_data[!duplicated(new_data$genes),]
return(new_data)
}
test <- affy_to_hgnc(diff_exp_tab_5_4)
View(test)
#perform welch t test on filtered data and output to csv.
diff_exp_tab_5_4 <- welch_t(filtered_data_4_4, clusters_4_4) %>%
affy_to_hgnc()
write.csv(diff_exp_tab_5_4,
'/projectnb/bf528/users/saxophone/data_p1/data_analysis_out/proj1_5_4.csv',
row.names = F)
View(test)
View(filtered_data_4_4)
